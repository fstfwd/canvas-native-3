# CanvasNative

CanvasNative is a method of representing Canvas documents in a linear fashion
(e.g. not JSON) while including metadata about the document's contents.

This project comprises the specification and utilities for the CanvasNative
format.

## Development

A single command will build distribution code, and the README file:

```
npm run build
```

**Make sure and run this before each commit!**

While developing, it is useful to run `npm run watch`. This will run a
foreground process that monitors all build- and test-dependent files, and run
the build and test processes as needed.

To run the watch command, both `watchman` and `pywatchman` are required. On OS X
with Homebrew and Python already installed, the installation looks like this:

```sh
brew install watchman
sudo pip install pywatchman
```

Then, in a new terminal window, `npm run watch` should work.

## Documentation Note

CanvasNative uses an invisible character to separate parts of its lines. For
readability, the documentation replaces that character with `{{SEPARATOR}}`.

## Types

In a CanvasNative document, an individual line is one of several types.
Typically, a line has the following format:

```regex
^(?<typeKey>[a-z])\\{{SEPARATOR}}(?<metadata>{.*?})\\{{SEPARATOR}}(?<content>.*)$
```

Or, more readably:

```
${typeKey}{{SEPARATOR}}${metadata}{{SEPARATOR}}${content}
```

In a line, the `typeKey` seen above is a typically two-character identifier for
a specific line type. The `metadata` property is a JSON string containing
information about the line.